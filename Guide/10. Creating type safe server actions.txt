type safe server action abstrakcija:

 > server_action
    > types.ts (input & output) ==> output da bude neki type iz baze npr ili error; input ce da bude validacija za input type
    > schema.ts (ZOD validation) 
    > index.ts (handler) ==> server action itself

Server actioni ce ovako izgledati. Stavicemo ih u folder i razdelicemo ih u nekoliko fajlova.

that is goona leave us with the following thing:

const {execute, data, error, fieldErrors} = useAction(safeAction, {
    onSuccess(data: Output){},
    onError(error: string){},
    onComplete(){}
})

fieldErrors su errori na nekom input polju na primer.

-------------------------------------------------------

Unutar "lib" foldera mozemo da dodjemo i kreiramo server action abstraction.

> lib 
    - create-safe-action.ts 

import {z} from "zod";

export type FieldErrors<T> = {
    [K in keyof T]?: string[];          
}

export type ActionState<TInput, TOutput> = {
    fieldErrors?:FieldErrors<TInput>;    //FieldErrors<TInput> svaki input key ce imati svoju listu errora.
    error?:string | null;
    data?:TOutput;
}

export const createSafeAction = <TInput, TOutput>(
    schema: z.Schema<TInput>,
    handler: (validatedData: TInput) => Promise<ActionState<TInput, TOutput>>
)=>{
    return async (data: TInput) :Promise<ActionState<TInput, TOutput> =>{
        const validationResult schema.safeParse(data);

        if(!validationResult.success){
            return {
                fieldErrors: validationResult.error.flatten().fieldErrors as FieldErrors<TInput>
            }
        }

        return handler(data);
    }
}
---------------------------------------------------------------------------------

potom unutar actions foldera odes i kreiras svoj custom type safe action 

> actions
    > create-board 
        > schema.ts
        > index.ts 
        > types.ts

-----
schema.ts 
-- Definisemo nasu schemu

import {z} from "zod";

export const CreateBoard = z.object({
    title: z.string({
        required_error:"Title is required",
        invalid_type_error:"Title is required",
    }).min(3,{
        message:"Title is too short"
    })
});

------
types.ts 
-- definisemo nase input i output tipove. 
-- Input type ce se inferovati iz scheme

import {z} from "zod";
import { Board } from "@prisma/client";

import { ActionState } from "@/lib/create-safe-action";
import {CreateBoard} from "./schema";

export type InputType = z.infer<typeof CreateBoard>;
export type ReturnType = ActionState<InputType, Board>;


------
index.ts
-- ovde definisemo sta zelimo da radimo u handleru server actiona 

"use server";

import { auth } from "@clerk/nextjs";
import { InputType, ReturnType } from "./types";
import { db } from "@/lib/db";
import { revalidatePath } from "next/cache";
import { createSafeAction } from "@/lib/create-safe-action";
import { CreateBoard } from "./schema";

-- InputType ce vec biti validiran createSafeAction pa mozemo odmah da radimo s podacima;
const handler = async (data: InputType):Promise<ReturnType>=> {
    const {userId} = auth(); --autorizaciju odmah odradis

    if(!userId){
        return {
            error: "Unauthorized"
        }
    }

    const {title} = data;
    let board;

    try{
        board = await db.board.create({
            data:{
                title
            }
        });
    }catch(error){
        return {
            error:"Failed to create."
        }
    }
    
    revalidatePath(`/board/${board.id}`); --refresh/rerender data on the current path

    return {
        data: board
    };
}

export const createBoard = createSafeAction(CreateBoard, handler);

-----------------------------------------------------------------
sledeci korak je kreiranje hook-a koji ce slusati taj server action  
da mozemo da ga consumeujemo.