> hooks 
    > use-action.ts

import {useState, useCallback} from "react"

import { ActionState, FieldError } from "@/lib/create-safe-action"

type Action<TInput, TOutput> = (data: TInput) => Promise<ActionState<TInput, TOutput>>;

interface UseActionOptions<TOutput>{
    onSuccess?:(data: TOutput)=>void;
    onError?:(error: string)=>void;
    onComplete?:()=>void
}

export const useAction = <TInput, TOutput>(
    action: Action<TInput, TOutput>,
    options: UseActionOptions<TOutput> = {}
) => {
    const [fieldErrors, setFieldErrors] = useState<FieldError<TInput> | undefined>(undefined);
    const [error, setError] = useState<string | undefined>(undefined);
    const [data, setData] = useState<TOutput | undefined>(undefined);
    const [isLoading, setIsLoading] = useState<boolean>(false);
    
    const execute = useCallback(async (input: TInput)=>{
        setIsLoading(true);

        try{
           const result = await action(input);

            if(!result)
            return;

            if(result.fieldErrors)
            setFieldErrors(result.fieldErrors);
            else setFieldErrors(undefined);

            if(result.data){
                setData(result.data);

                if(options.onSuccess)
                options.onSuccess(result.data);
            }
            else setData(undefined);

            if(result.error){
                setError(result.error);

                if(options.onError)
                options.onError(result.error);
            }else setError(undefined)
            
        }finally{
            setIsLoading(false)

            if(options.onComplete)
            options.onComplete();
        }
    },[options, action]);

    return {
        execute,
        fieldErrors,
        error,
        data,
        isLoading
    }
}